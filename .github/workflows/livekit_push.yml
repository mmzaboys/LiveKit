name: Deploy LiveKit to gcp VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to gcp vm
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVERIP }}
          username: ubuntu
          key: ${{ secrets.SERVERSSHKEY }}
          port: 22
          timeout: 300s
          command_timeout: 30m
          script_stop: true
          debug: true
          script: |
            set -e
            echo "=== Starting deployment ==="
            
            # Switch to root and execute commands
            sudo bash -c "
            set -e
            export DEBIAN_FRONTEND=noninteractive
            
            echo 'Connected as: \$(whoami)'
            echo 'Working directory: \$(pwd)'
            
            # Update and install dependencies
            apt update -y
            apt install -y curl git
            
            # --- Docker Installation ---
            if command -v docker &> /dev/null; then
              echo '=== Docker already installed: \$(docker --version) ==='
            else
              echo '=== Installing Docker ==='
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              usermod -aG docker ubuntu
            fi
            
            # --- Docker Compose Installation ---
            if command -v docker-compose &> /dev/null; then
              echo '=== Docker Compose already installed: \$(docker-compose --version) ==='
            else
              echo '=== Installing Docker Compose ==='
              curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose 2>/dev/null || true
            fi
            
            # Start Docker service
            systemctl enable docker
            systemctl start docker
            
            # Wait a moment for Docker to be ready
            sleep 5
            "
            
            # Continue as ubuntu user for the application setup
            echo "=== Setting up LiveKit application ==="
            
            LIVEKIT_DIR="/home/ubuntu/livekit"
            sudo rm -rf "$LIVEKIT_DIR"
            sudo git clone https://github.com/mmzaboys/LiveKit.git "$LIVEKIT_DIR"
            sudo chown -R ubuntu:ubuntu "$LIVEKIT_DIR"
            
            cd "$LIVEKIT_DIR"
            
          
            
            echo "APP_DOMAIN=${{ secrets.DOMAIN }}" > .env
            echo "SSL_EMAIL=${{ secrets.EMAIL }}" >> .env
            echo "LIVEKIT_DOMAIN=${{ secrets.DOMAIN }}" >> .env
            echo "LIVEKIT_API_KEY=${{ secrets.KEY }}" >> .env
            echo "LIVEKIT_API_SECRET=${{ secrets.SECRET }}" >> .env
            
            sudo chmod +x init-letsencrypt.sh configfiles.sh
            sudo chown ubuntu:ubuntu .env
            
            # Run the application setup
            sudo -u ubuntu bash -c "
            set -e
            cd '$LIVEKIT_DIR'
            
            echo '=== Starting LiveKit services ==='
            docker-compose down || true
            ./configfiles.sh
            ./init-letsencrypt.sh
            docker-compose up -d
            
            sleep 10
            docker ps
            docker-compose logs --tail=10 || echo 'Logs check completed'
            "
            
            echo "🎉 === Deployment completed successfully ==="
                        

            echo "📊 Reinstalling Node Exporter from scratch..."

            # Stop and remove old service if exists
            if systemctl list-unit-files | grep -q "node_exporter.service"; then
                echo "🛑 Removing old Node Exporter service..."
                sudo systemctl stop node_exporter || true
                sudo systemctl disable node_exporter || true
                sudo rm -f /etc/systemd/system/node_exporter.service
            fi

            # Remove old binary
            if [ -f /usr/local/bin/node_exporter ]; then
                echo "🗑 Removing old Node Exporter binary..."
                sudo rm -f /usr/local/bin/node_exporter
            fi

            # Config
            NODE_EXPORTER_VERSION="1.7.0"
            ARCH="amd64"
            DOWNLOAD_URL="https://github.com/prometheus/node_exporter/releases/download/v${NODE_EXPORTER_VERSION}/node_exporter-${NODE_EXPORTER_VERSION}.linux-${ARCH}.tar.gz"

            # Download
            cd /tmp
            TEMP_DIR=$(mktemp -d)
            cd "$TEMP_DIR"

            echo "📥 Downloading Node Exporter v${NODE_EXPORTER_VERSION}..."
            wget -q "$DOWNLOAD_URL"

            echo "📦 Extracting..."
            tar xzf "node_exporter-${NODE_EXPORTER_VERSION}.linux-${ARCH}.tar.gz"

            echo "🔨 Installing binary..."
            sudo cp "node_exporter-${NODE_EXPORTER_VERSION}.linux-${ARCH}/node_exporter" /usr/local/bin/
            sudo chown root:root /usr/local/bin/node_exporter
            sudo chmod 755 /usr/local/bin/node_exporter

            # Create user if missing
            if ! id "node_exporter" &>/dev/null; then
                echo "👤 Creating node_exporter user..."
                sudo useradd --no-create-home --shell /bin/false node_exporter
            fi

            # Write service file line by line
            SERVICE_FILE="/etc/systemd/system/node_exporter.service"
            sudo rm -f "$SERVICE_FILE"
            sudo touch "$SERVICE_FILE"
            sudo chmod 644 "$SERVICE_FILE"

            sudo sh -c 'echo "[Unit]" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "Description=Node Exporter" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "Documentation=https://github.com/prometheus/node_exporter" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "Wants=network-online.target" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "After=network-online.target" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "[Service]" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "User=node_exporter" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "Group=node_exporter" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "Type=simple" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "Restart=on-failure" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "RestartSec=5" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "ExecStart=/usr/local/bin/node_exporter --web.listen-address=:9100 --path.rootfs=/" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "[Install]" >> /etc/systemd/system/node_exporter.service'
            sudo sh -c 'echo "WantedBy=multi-user.target" >> /etc/systemd/system/node_exporter.service'

            # Reload and start service
            echo "🚀 Starting Node Exporter..."
            sudo systemctl daemon-reload
            sudo systemctl enable node_exporter
            sudo systemctl start node_exporter

            sleep 5
            if systemctl is-active --quiet node_exporter; then
                echo "✅ Node Exporter is running!"
                echo "📈 Metrics: http://localhost:9100/metrics"
            else
                echo "❌ Node Exporter failed to start"
                sudo systemctl status node_exporter --no-pager
                exit 1
            fi

            # Cleanup
            cd /tmp
            rm -rf "$TEMP_DIR"
            echo "🎉 Done!"
